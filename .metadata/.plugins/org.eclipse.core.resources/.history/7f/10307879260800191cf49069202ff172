package org.bibr.robot.module.controller.api;

import java.util.List;
import java.util.Map;

import org.bibr.robot.module.bean.bo.RobotConf;
import org.bibr.robot.module.bean.vo.ResultVO;
import org.bibr.robot.module.constant.RobotConstant;
import org.bibr.robot.module.exception.BusinessException;
import org.bibr.robot.module.service.RobotService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Controller
@RequestMapping("/robot")
@Api(value = "机器人相关的api")
public class RobotDoController {
	
	private final static Logger logger = LoggerFactory.getLogger(RobotDoController.class);
	@Autowired
	private RobotService robotService;
	
	@ApiOperation(value = "新建机器人任务————zlg",
			notes = "执行机器人ID    robotId（必填）<br>"
			+ "交易区ID    platId（必填）<br>"
			+ "虚拟币ID    coinId（必填）<br>"
			+ "刷单频率（每次执行刷单最大笔数）    frequency（必填）<br>"
			+ "任务执行最小时间（单位：秒     timeMin（必填）<br>"
			+ "任务执行最大时间（单位：秒     timeMax（必填）<br>"
			+ "每单交易额下限（单位：元）     limitMin（必填）<br>"
			+ "每单交易额上限（单位：元）    limitMax（必填）")
	@RequestMapping(value = "/addTask", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> addTask(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&RobotMode&RobotDoController&addTask&ApiStatistics");
		String str = null;
		try {
			str = robotService.addTask(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("addTask?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("addTask?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(RobotConstant.CODE_200,RobotConstant.SUCCESS, str);
	}
	
	@ApiOperation(value = "修改机器人任务————zlg",
			notes = "刷单任务uuid    uuid（必填）<br>"
			+ "交易区ID    platId（必填）<br>"
			+ "虚拟币ID    coinId（必填）<br>"
			+ "刷单频率（每次执行刷单最大笔数）    frequency（必填）<br>"
			+ "任务执行最小时间（单位：秒     timeMin（必填）<br>"
			+ "任务执行最大时间（单位：秒     timeMax（必填）<br>"
			+ "每单交易额下限（单位：元）     limitMin（必填）<br>"
			+ "每单交易额上限（单位：元）    limitMax（必填）<br>"
			+ "刷单标记（默认0：不控制，1：只刷买单，2：只刷卖单） dealFlag（非必填）")
	@RequestMapping(value = "/updateTask", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> updateTask(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&RobotMode&RobotDoController&updateTask&ApiStatistics");
		String str = null;
		try {
			str = robotService.updateTask(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("updateTask?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("updateTask?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(RobotConstant.CODE_200,RobotConstant.SUCCESS, str);
	}
	
	@ApiOperation(value = "查询机器人任务————zlg",notes = "暂无")
	@RequestMapping(value = "/showTasks", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<List<RobotConf>> showTasks(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&RobotMode&RobotDoController&showTasks&ApiStatistics");
		List<RobotConf> resultList = null;
		try {
			resultList = robotService.showTasks(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("showTasks?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("showTasks?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<List<RobotConf>>(RobotConstant.CODE_200,RobotConstant.SUCCESS, resultList);
	}
	
	@ApiOperation(value = "开启机器人刷单任务————zlg",notes = "刷单任务uuid    uuid（必填）<br>")
	@RequestMapping(value = "/taskOn", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> taskOn(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&RobotMode&RobotDoController&taskOn&ApiStatistics");
		String str = null;
		try {
			str = robotService.taskOn(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("taskOn?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("taskOn?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(RobotConstant.CODE_200,RobotConstant.SUCCESS, str);
	}
	
	@ApiOperation(value = "关闭机器人刷单任务————zlg",notes = "刷单任务uuid    uuid（必填）<br>")
	@RequestMapping(value = "/taskOff", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> taskOff(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&RobotMode&RobotDoController&taskOff&ApiStatistics");
		String str = null;
		try {
			str = robotService.taskOff(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("taskOff?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("taskOff?" + JSONObject.toJSONString(map));
			throw new BusinessException(RobotConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(RobotConstant.CODE_200,RobotConstant.SUCCESS, str);
	}
}
