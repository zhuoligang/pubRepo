package org.bibr.accountcheck.center.thread;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;

import org.bibr.accountcheck.center.bean.bo.AssetAccount;
import org.bibr.accountcheck.center.constant.AccountCheckConstant;
import org.bibr.accountcheck.center.exception.BusinessException;
import org.bibr.accountcheck.center.service.AccountCheckService;
import org.bibr.accountcheck.center.service.ForkJoinAssetAccount;
import org.bibr.accountcheck.center.util.RestTemplateUtil;
import org.bibr.accountcheck.center.util.SpringContextUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

/**
 * 
* @ClassName: CoreCheckThread
* @Description: TODO(核心校验)
* @author Administrator
* @date 2018年12月18日下午6:05:59
*
 */
public class CoreCheckThread implements Runnable{
	private final static Logger logger = LoggerFactory.getLogger(CoreCheckThread.class);
	
	private AccountCheckService accountCheckService = (AccountCheckService) SpringContextUtil.getBean(AccountCheckService.class);
	
	//用户uuid
	private String userId;
	//币种国际码
	private String coinCode;
	
	public CoreCheckThread(String userId) {
		super();
		this.userId = userId;
	}
	
	public CoreCheckThread(String userId, String coinCode) {
		super();
		this.userId = userId;
		this.coinCode = coinCode;
	}
	
	@Override
	public void run() {
		//1.阈值校验（后台设置阈值，阈值触碰冻结用户）
		ThresholdThread thresholdThread = new ThresholdThread(userId);
		Thread checkThradOne = new Thread(thresholdThread);
		checkThradOne.start();
		if(coinCode == null){
			//2.一键核对（用户所有持有币种资产校验）
			List<AssetAccount> list = this.accountCheckService.selectCoinCodesByUserId(userId);
			if(list == null || list.size() <= 0){
				logger.error("没有该用户的任何资产信息");
				throw new BusinessException(AccountCheckConstant.CODE_500, "没有该用户的任何资产信息");
			}
	        ForkJoinPool forkjoinPool = new ForkJoinPool(4);
	        ForkJoinAssetAccount task = new ForkJoinAssetAccount(list);
	        //forkJoin 线程池同时工作
	        Future<Boolean> result = forkjoinPool.submit(task);
	        boolean bool = false;
	        try {
	        	bool = result.get();
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        } catch (ExecutionException e) {
	            e.printStackTrace();
	        }    
	        if(!bool){
				logger.error("资产校验程序启动错误");
				throw new BusinessException(AccountCheckConstant.CODE_500, "资产校验程序启动错误");
	        }
//			for (AssetAccount assetAccount : list) {
//				// 查询用户持有币种，分别校验【分别做业务】
//				AccountCheckThread accountCheckThread = new AccountCheckThread(assetAccount);
//				Thread checkThradTwo = new Thread(accountCheckThread);
//				checkThradTwo.start();
//			}
		}else{
			//3.业务校验（用户本次交易涉及的币种资产校验）--一键核对已经完成了业务校验的币种资产校验
			Map<String, String> sendMap = new HashMap<>();
			sendMap.put("userId", userId);
			sendMap.put("coinCode", coinCode);
			AssetAccount assetAccount = this.accountCheckService.selectCoinCodeByUserId(sendMap);
			if(assetAccount == null){
				logger.error("没有该用户此币种的资产信息");
				throw new BusinessException(AccountCheckConstant.CODE_500, "没有该用户此币种的资产信息");
			}
			//币种资产校验
			AccountCheckThread accountCheckThread = new AccountCheckThread(assetAccount);
			Thread checkThradTwo = new Thread(accountCheckThread);
			checkThradTwo.start();
		}
		
	}

}
