package org.bibr.distributed.octopus.controller;

import java.util.List;
import java.util.Map;

import org.bibr.distributed.octopus.bean.po.OctopusArticle;
import org.bibr.distributed.octopus.bean.po.OctopusArticleType;
import org.bibr.distributed.octopus.bean.vo.OctopusArticleVO;
import org.bibr.distributed.octopus.bean.vo.ResultVO;
import org.bibr.distributed.octopus.constant.OctopusConstant;
import org.bibr.distributed.octopus.exception.BusinessException;
import org.bibr.distributed.octopus.service.OctopusArticleService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 
* @ClassName: OctopusArticleController
* @Description: TODO(文章管理控制台)
* @author zlg
* @date 2018年11月6日上午10:48:13
*
 */
@Controller
@RequestMapping("/octopusArticle")
@Api(value = "文章管理相关的api")
public class OctopusArticleController {
	private final static Logger logger = LoggerFactory.getLogger(OctopusArticleController.class);
	
	@Autowired
	private OctopusArticleService octopusArticleService;
	
	@ApiOperation(value = "获取所有（指定）文档类型，包含每种类型下最多4个小标题————zlg",notes = "文档类型集合		typeIds（非必填）<br>"
			+ "属于哪个平台（1：承兑，2：币币）    platform（非必填，不填的时候默认1）")
	@RequestMapping(value = "/getOctopusArticleVOs", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<List<OctopusArticleVO>> getOctopusArticleVOs(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, Object> map) {
		logger.info("&OctopusMode&OctopusArticleController&getOctopusArticleVOs&ApiStatistics");
		List<OctopusArticleVO> resultMap = null;
		try {
			resultMap = octopusArticleService.getOctopusArticleVOs(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTypes?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTypes?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<List<OctopusArticleVO>>(OctopusConstant.CODE_200,OctopusConstant.SUCCESS, resultMap);
	}
	
	@ApiOperation(value = "获取所有（指定）文档类型————zlg",notes = "文档类型集合		typeIds（非必填）")
	@RequestMapping(value = "/getOctopusArticleTypes", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<List<OctopusArticleType>> getOctopusArticleTypes(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, Object> map) {
		logger.info("&OctopusMode&OctopusArticleController&getOctopusArticleTypes&ApiStatistics");
		List<OctopusArticleType> resultMap = null;
		try {
			resultMap = octopusArticleService.getOctopusArticleTypes(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTypes?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTypes?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<List<OctopusArticleType>>(OctopusConstant.CODE_200,OctopusConstant.SUCCESS, resultMap);
	}
	
	@ApiOperation(value = "获取指定文档类型下的所有文档基础信息————zlg",notes = "文档类型		typeId（必填）<br>"
			+ "属于哪个平台（1：承兑，2：币币）    platform（非必填，不填的时候默认1）<br>"
			+ "指定页码		pageNumber（非必填）<br> 指定每页显示条数		pageSize（非必填）")
	@RequestMapping(value = "/getOctopusArticles", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<List<OctopusArticle>> getOctopusArticles(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&OctopusMode&OctopusArticleController&getOctopusArticles&ApiStatistics");
		List<OctopusArticle> resultMap = null;
		try {
			resultMap = octopusArticleService.getOctopusArticles(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticles?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticles?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<List<OctopusArticle>>(OctopusConstant.CODE_200,OctopusConstant.SUCCESS, resultMap);
	}
	
	@ApiOperation(value = "获取指定文档类型详细信息————zlg",notes = "文档id		id（必填）")
	@RequestMapping(value = "/getOctopusArticleTail", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<OctopusArticle> getOctopusArticleTail(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map) {
		logger.info("&OctopusMode&OctopusArticleController&getOctopusArticleTail&ApiStatistics");
		OctopusArticle resultMap = null;
		try {
			resultMap = octopusArticleService.getOctopusArticleTail(map);
		}catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTail?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getOctopusArticleTail?" + JSONObject.toJSONString(map));
			throw new BusinessException(OctopusConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<OctopusArticle>(OctopusConstant.CODE_200,OctopusConstant.SUCCESS, resultMap);
	}

}
