package org.bibr.user.center.controller.front;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.bibr.user.center.bean.vo.ResultVO;
import org.bibr.user.center.constant.UserCenterConstant;
import org.bibr.user.center.controller.api.UserCenterController;
import org.bibr.user.center.exception.BusinessException;
import org.bibr.user.center.service.UserCenterFrontService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 
* @ClassName: UserCenterFrontController
* @Description: TODO(用户中心前端交互控制台)
* @author Administrator
* @date 2018年11月22日上午10:37:40
*
 */
@Controller
@RequestMapping("/center/front/pass")
@Api(value = "用户中心前端交互控制台--不需要监控")
public class UserCenterFrontController {
	
	private final static Logger logger = LoggerFactory.getLogger(UserCenterController.class);
	@Autowired
	private UserCenterFrontService userCenterFrontService;
	
	@ApiOperation(value = "注册基本信息审核————zlg",
			notes = "手机号		mobile（必填）<br>密码		password（必填）<br>"
					+ "推荐码		parentId（非必填）")
	@RequestMapping(value = "/checkRegister", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> checkRegister(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontController&checkRegister&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.checkRegister(map,request);
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("checkRegister?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("checkRegister?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
	@ApiOperation(value = "注册————zlg",
			notes = "手机号		mobile（必填）<br>密码		password（必填）<br>短信验证码		mobileVcode（必填<br>"
					+ "推荐码		parentId（非必填）")
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> register(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontController&register&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.register(map,request);
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("register?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("register?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
	@ApiOperation(value = "发送短信————zlg",
			notes = "手机号		mobile（必填）")
	@RequestMapping(value = "/sendNote", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> sendNote(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontController&sendNote&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.sendNote(map,request);
//			UserCenterUtil.sendMessage(map.get("mobile"),map.get("mobile"));
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("sendNote?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("sendNote?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
	@ApiOperation(value = "阈值校验短信通知————zlg",
			notes = "手机号		mobile（必填）<br>用户id    memberId（必填）<br>阈值    countThreshold（必填）")
	@RequestMapping(value = "/sendNote", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> sendThresholdNote(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontController&sendThresholdNote&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.sendThresholdNote(map,request);
//			UserCenterUtil.sendMessage(map.get("mobile"),map.get("mobile"));
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("sendThresholdNote?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("sendThresholdNote?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
}
