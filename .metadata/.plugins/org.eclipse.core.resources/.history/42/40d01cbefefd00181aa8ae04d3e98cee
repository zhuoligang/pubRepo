package org.bibr.user.center.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.common.message.Message;
import org.bibr.user.center.constant.UserCenterConstant;
import org.bibr.user.center.exception.BusinessException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.druid.util.StringUtils;

public class UserCenterUtil {
	private final static Logger logger = LoggerFactory.getLogger(UserCenterUtil.class);
	
	private static DefaultMQProducer producer = 
			(DefaultMQProducer) SpringContextUtil.getBean("defaultProducer");
	/**
	 * 
	* @Title: sendMessage
	* @Description: TODO(用户中心通知消息发送)
	* @param @param msg
	* @param @return
	* @param @throws Exception    设定文件
	* @return boolean    返回类型
	* @throws
	 */
	public static boolean sendMessage(String key,String msg)  {
		boolean bool = false;
		try {
			Message message=new Message(UserCenterConstant.ROCKETMQ_PRODUCER_TOPIC,
					UserCenterConstant.ROCKETMQ_PRODUCER_TAGS_ADD,
					key, msg.getBytes());
			SendResult result= producer.send(message);
			logger.info("rocketmq producer send message : " + msg);
			bool = true;
		} catch (Exception e) {
			logger.error("通知消息发送出错，请联系管理员: "+e.getMessage());
			throw new BusinessException(UserCenterConstant.CODE_500, "通知消息发送出错，请联系管理员");
		}
		return bool;
		
	}
	
	/**
	 * 
	* @Title: sendMessage
	* @Description: TODO(用户中心通知消息发送 ---批量)
	* @param @param msg
	* @param @return    设定文件
	* @return boolean    返回类型
	* @throws
	 */
	public static boolean sendMessage(List<String> msg)  {
		boolean bool = false;
		try {
			for (String str : msg) {
				Message message=new Message(UserCenterConstant.ROCKETMQ_PRODUCER_TOPIC, str.getBytes());
				SendResult result=producer.send(message);
				logger.info("rocketmq producer send message : " + str);
			}
			bool = true;
		} catch (Exception e) {
			logger.error("通知消息发送出错，请联系管理员: "+e.getMessage());
			throw new BusinessException(UserCenterConstant.CODE_500, "通知消息发送出错，请联系管理员");
		}
		return bool;
		
	}
		
	/**
	 * uuid生产
	 * @return
	 */
	public static String createUUId() {
		return UUID.randomUUID().toString().replace("-", "");
	}
	
	/**
	 * 
	* @Title: isInteger
	* @Description: TODO(判断字符串是否是全数字)
	* @param @param str
	* @param @return    设定文件
	* @return boolean    返回类型
	* @throws
	 */
	public static boolean isInteger(String str) {
	Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");
	return pattern.matcher(str).matches();
	}
	
	/**
	 * 判断字符串总字符数，中文视为2字符
	 * @param value
	 * @return
	 */
	public static int StringLength(String value) {
		int valueLength = 0;
		String chinese = "[\u4e00-\u9fa5]";
		for (int i = 0; i < value.length(); i++) {
			String temp = value.substring(i, i + 1);
			if (temp.matches(chinese)) {
				valueLength += 2;
			} else {
			valueLength += 1;
			}
		}
		return valueLength;
	}
	
	/**
	 * 获取当天0点0分0秒
	 * @return
	 */
    public static Date getTimesmorning() {
        Calendar cal = Calendar.getInstance();
        cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
        Date beginOfDate = cal.getTime();
        return beginOfDate;
    }
    
	/**
	 * 获取当前网络ip
	 * @param request
	 * @return
	 */
	public static String getIpAddr(HttpServletRequest request){
		String ipAddress = request.getHeader("x-forwarded-for");
		if(ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
			ipAddress = request.getHeader("Proxy-Client-IP");
		}
		if(ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
			ipAddress = request.getHeader("WL-Proxy-Client-IP");
		}
		if(ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
			ipAddress = request.getRemoteAddr();
			if(ipAddress.equals("127.0.0.1") || ipAddress.equals("0:0:0:0:0:0:0:1")){
				//根据网卡取本机配置的IP
				InetAddress inet = null;
				try {
					inet = InetAddress.getLocalHost();
				} catch (Exception e) {
					e.printStackTrace();
				}
				ipAddress= inet.getHostAddress();
			}
		}
		if(ipAddress != null && ipAddress.length() > 15){
			if(ipAddress.indexOf(",") > 0){
				ipAddress = ipAddress.substring(0,ipAddress.indexOf(","));
			}
		}
		return ipAddress; 
	}

    //生成min->max之间的数,最小生成的随机数为min，最大生成的随机数为max  
    public static int getRandomNum(int min,int max){  
         Random rdm = new Random();  
         return rdm.nextInt(max-min+1)+min;  
    } 
    
    /**
     * 
    * @Title: generateAppCode2Disk
    * @Description: TODO(生成10000001-99999999的数字编码保存到硬盘)
    * @param     设定文件
    * @return void    返回类型
    * @throws
     */
    public static void generateAppCode2Disk(){
        int begin = 10000001;  
        int end = 99999999;  
        int count = begin + end;  
        //生成1到99999999的所有整数  
        int[] codes = new int[count + 1];  
        for (int i = begin; i <= end; i++){  
            codes[i] = i;  
        }
        //随机交换数据  
        int index = 0;
        int tempCode = 0;
//        Random random = new Random();
        for (int i = begin; i <= end; i++){  
            index = getRandomNum(begin, end);
//            		random.nextInt(count+1);                                                          
            tempCode = codes[index];  
            codes[index] = codes[i];  
            codes[i] = tempCode;  
        }
        //生成1000个文件,每个文件包含100000个appCode
        StringBuilder sb = new StringBuilder();
        int flag = 100000;
        System.out.println("***********开始**********");
        try {
            for(int i = begin; i <= end; i++){
                sb.append(codes[i]).append("\n");
                if(i == end || i%flag == 0){
                    File folder = new File(UserCenterConstant.ID_GENERATE_URL);
                    if(!folder.isDirectory()){
                        folder.mkdir();
                    }
                    if(i==end){
                        i = end +1;
                    }
                    File file = new File(UserCenterConstant.ID_GENERATE_URL+"ID_"+(i/flag)+".txt");
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    BufferedWriter bw=new BufferedWriter(new FileWriter(file.getAbsoluteFile()));
                    bw.write(sb.toString());
                    bw.flush();
                    bw.close();
                    sb = new StringBuilder();
                    System.out.println("当前i值："+i+"第"+(i/flag)+"个文件生成成功！");
                }
            }
            System.out.println("***********结束**********");
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * 
    * @Title: createAppCode
    * @Description: TODO(获取唯一8位ID)
    * @param @return    设定文件
    * @return String    返回类型
    * @throws
     */
    public static String createMemberId(){
        BufferedWriter bw = null;
        BufferedReader br = null;
        FileReader fr = null;
        FileWriter fw = null;
        try {
            String dir = UserCenterConstant.ID_GENERATE_URL;
            if(StringUtils.isEmpty(dir)){
                throw new Exception("获取文件路径为空");
            }
            File rootFile = new File(dir);
            String[] fileNames = rootFile.list();
            if(fileNames == null || fileNames.length == 0){
                throw new Exception("路径不正确，或者ID已经分配完毕，请联系管理员");
            }
            //获取第一个文件
            fr=new FileReader(dir+"/"+fileNames[0]);//获取文件流
            br = new BufferedReader(fr); //将流整体读取。
            StringBuilder sb = new StringBuilder();
            String appCode = "";
            String temp;
            int count =1;
            while(!StringUtils.isEmpty(temp=br.readLine())){
                if(count == 1){
                    count++;
                    appCode = temp;
                    continue;
                }
                else{
                    sb.append(temp).append("\n");
                }
 
            }
            br.close();
            fr.close();
            if(!StringUtils.isEmpty(appCode)){
                //判断文件内容是否还有下一行
                if(sb.length()<=0){
                    File delFile = new File(dir+"/"+fileNames[0]);
                    if(delFile.exists()){
                        delFile.delete();//删掉
                    }
                }
                else{
                    //将剩余内容重写写回文件
                    fw = new FileWriter(dir+"/"+fileNames[0]);
                    bw=new BufferedWriter(fw);
                    bw.write(sb.toString());
                    bw.flush();
                    bw.close();
                    fw.close();
                }
                String prex = "00000000";
                appCode = prex.substring(0,prex.length()-appCode.length())+appCode;
                return appCode;
            }
            else{
                throw new Exception("文件中内容为空");
            }
        } catch (Exception e) {
        	logger.error("获取ID error:"+e.getMessage());
            return null;
        } finally{
            try {
                if(bw != null)bw.close();
                if(br != null)br.close();
                if(fr != null)fr.close();
                if(fw != null)fw.close();
            } catch (IOException e) {
            	logger.error("关闭文件流文件异常："+e.getMessage());
            }
        }
    }
}
