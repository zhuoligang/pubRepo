package org.bibr.accountcheck.center.controller.api;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.bibr.accountcheck.center.bean.vo.ResultVO;
import org.bibr.accountcheck.center.constant.AccountCheckConstant;
import org.bibr.accountcheck.center.exception.BusinessException;
import org.bibr.accountcheck.center.service.AccountCheckService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 
* @ClassName: AccountCheckApiController
* @Description: TODO(这里用一句话描述这个类的作用)
* @author Administrator
* @date 2018年12月18日下午5:23:03
*
 */
@Controller
@RequestMapping("/api")
public class AccountCheckApiController {
	private final static Logger logger = LoggerFactory.getLogger(AccountCheckApiController.class);
	@Autowired
	private AccountCheckService accountCheckService;
	
	@ApiOperation(value = "对指定用户的所有（或指定）持有币种资产做校验————zlg",
			notes = "用户uuid    userId（必填）<br>币种国际码   coinCode（非必填）")
	@RequestMapping(value = "/safeCheck", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> safeCheck(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&AccountCheckMode&TsetController&safeCheck&ApiStatistics");
		String resultStr = "";
		try {
			resultStr = accountCheckService.safeCheck(map);
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("safeCheck?" + JSONObject.toJSONString(map));
			throw new BusinessException(AccountCheckConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("safeCheck?" + JSONObject.toJSONString(map));
			throw new BusinessException(AccountCheckConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(AccountCheckConstant.CODE_200,AccountCheckConstant.SUCCESS, resultStr);
	}
}
