package org.bibr.user.center.controller.front;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.bibr.user.center.bean.vo.ResultVO;
import org.bibr.user.center.constant.UserCenterConstant;
import org.bibr.user.center.controller.api.UserCenterController;
import org.bibr.user.center.exception.BusinessException;
import org.bibr.user.center.service.UserCenterFrontService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

/**
 * 
* @ClassName: UserCenterFrontVerifyController
* @Description: TODO(用户中心前端交互控制台--需要监控)
* @author Administrator
* @date 2018年11月26日下午4:55:09
*
 */
@Controller
@RequestMapping("/center/front/verify")
@Api(value = "用户中心前端交互控制台")
public class UserCenterFrontVerifyController {
	
	private final static Logger logger = LoggerFactory.getLogger(UserCenterController.class);
	@Autowired
	private UserCenterFrontService userCenterFrontService;
	
	
	@ApiOperation(value = "设置（修改）资金安全密码————zlg",
			notes = "用户uuid		uuid（必填）<br> 资金安全密码		tradePassword（必填）<br>短信验证码		mobileVcode（必填）")
	@RequestMapping(value = "/updateUserTrade", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> updateUserTrade(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontVerifyController&updateUserSelective&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.updateUserTrade(map,request);
			if(resultStr != null && resultStr.contains("成功")){
				return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
			}
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("updateUserTrade?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("updateUserTrade?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.FAILURE, resultStr);
	}
	
	@ApiOperation(value = "设置安全策略————zlg",
			notes = "用户uuid		uuid（必填）<br> "
					+ "修改密码后是否24小时禁止提币（0：启用，1：关闭		changePasswordType（非必填）<br>"
					+ "输入交易密码方式（0：第一次交易需要密码，1：每次都需要输入密码）		tradePasswordType（非必填）<br>"
					+ "ps:    后2个参数必填一个参数")
	@RequestMapping(value = "/updateStrategy", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> updateStrategy(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontVerifyController&updateStrategy&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.updateStrategy(map,request);
			if(resultStr != null && resultStr.contains("成功")){
				return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
			}
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("updateStrategy?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("updateStrategy?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.FAILURE, resultStr);
	}
	
	@ApiOperation(value = "普通实名认证————zlg",
			notes = "用户uuid		uuid（必填）<br> 用户姓名		name<br>"
					+ "身份证号		idcard（必填）<br>短信验证码		mobileVcode（必填）")
	@RequestMapping(value = "/certification", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> certification(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontVerifyController&certification&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.certification(map,request);
			if(!"认证成功".equals(resultStr)){
				return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.FAILURE, resultStr);
			}
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("certification?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("certification?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
	@ApiOperation(value = "高级实名认证获取token————zlg",
			notes = "用户uuid		uuid（必填）")
	@RequestMapping(value = "/getFaceIdToken", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> getFaceIdToken(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontVerifyController&getFaceIdToken&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.getFaceIdToken(map,request);
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getFaceIdToken?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getFaceIdToken?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
	
	@ApiOperation(value = "高级实名认证结果查询————zlg",
			notes = "用户uuid		uuid（必填）")
	@RequestMapping(value = "/getFaceIdResult", method = RequestMethod.POST)
	@ResponseBody
	public ResultVO<String> getFaceIdResult(@RequestBody @ApiParam(name = "条件map",
            value = "jeson格式map", required = true) Map<String, String> map,HttpServletRequest request) {
		logger.info("&UserCenterMode&UserCenterFrontVerifyController&getFaceIdResult&ApiStatistics");
		String resultStr = null;
		try {
			resultStr = this.userCenterFrontService.getFaceIdResult(map,request);
		} catch (BusinessException e) {
			logger.error(e.getMessage(), e);
			logger.error("getFaceIdResult?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}catch (Exception e) {
			logger.error(e.getMessage(), e);
			logger.error("getFaceIdResult?" + JSONObject.toJSONString(map));
			throw new BusinessException(UserCenterConstant.CODE_500, e.getMessage());
		}
		return new ResultVO<String>(UserCenterConstant.CODE_200,UserCenterConstant.SUCCESS, resultStr);
	}
}
